rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // School configuration collection for real-time updates
    match /school/{docId} {
      // Allow public read access for the website
      allow read: if true;
      
      // Allow write access only for approved admins
      allow write: if request.auth != null && isApprovedAdmin();
    }
    
    // Enhanced admin collection rules with proper validation
    match /admins/{adminId} {
      // Allow creation only for authenticated users for their own record.
      // This allows registration requests before email is verified, fixing the registration error.
      // The user must be creating a document with their own user ID.
      allow create: if request.auth.uid == adminId &&
                       isValidAdminData(request.resource.data) &&
                       request.auth != null;
      
      // Allow reading for authenticated users only
      allow read: if request.auth != null;
      
      // Allow updates only by approved admins with proper validation
      allow update: if request.auth != null &&
                       isApprovedAdmin() &&
                       isValidAdminUpdate(request.resource.data, resource.data);
      
      // Allow deletion only by approved admins
      allow delete: if request.auth != null && isApprovedAdmin();
    }
    
    // FIXED: Admin login activities collection with enhanced security
    match /admin_login_activities/{activityId} {
      // SECURITY FIX: Require authentication for creating login activities
      allow create: if request.auth != null &&
                       isValidLoginActivity(request.resource.data) &&
                       request.resource.data.email == request.auth.token.email;
      
      // Allow reading only for approved admins
      allow read: if request.auth != null && isApprovedAdmin();
      
      // Prevent modifications for audit trail integrity
      allow update, delete: if false;
    }
    
    // NEW: Rate limiting collection for persistent rate limiting
    match /rate_limits/{identifier} {
      // Only allow system to write rate limit data
      allow read, write: if request.auth != null && isApprovedAdmin();
    }
    
    // Helper functions for validation
    function isValidAdminData(data) {
      return data.keys().hasAll(['firstName', 'lastName', 'email', 'phone', 'status', 'requestedAt']) &&
             data.firstName is string && data.firstName.size() > 0 && data.firstName.size() <= 50 &&
             data.lastName is string && data.lastName.size() > 0 && data.lastName.size() <= 50 &&
             data.email is string && isValidEmail(data.email) && data.email.size() <= 100 &&
             data.phone is string && isValidPhone(data.phone) &&
             data.status in ['pending', 'approved', 'rejected', 'revoked'] &&
             data.requestedAt is string && isValidISODate(data.requestedAt);
    }
    
    function isValidAdminUpdate(newData, oldData) {
      // Only allow status updates and approval fields
      return newData.diff(oldData).affectedKeys().hasOnly(['status', 'approvedAt', 'approvedBy', 'rejectedAt', 'rejectedBy', 'revokedAt', 'revokedBy']) &&
             (newData.status == oldData.status || newData.status in ['pending', 'approved', 'rejected', 'revoked']);
    }
    
    function isValidLoginActivity(data) {
      return data.keys().hasAll(['email', 'loginTime', 'status']) &&
             data.email is string && isValidEmail(data.email) &&
             data.loginTime is string && isValidISODate(data.loginTime) &&
             data.status in ['success', 'failed'] &&
             // Additional security: limit data size
             data.keys().size() <= 10;
    }
    
    // ENHANCED: More robust email validation
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$') &&
             email.size() >= 5 &&
             email.size() <= 100 &&
             !email.matches('.*\\.\\..*') && // No consecutive dots
             !email.matches('^[.].*') && // No leading dot
             !email.matches('.*[.]$'); // No trailing dot
    }
    
    // ENHANCED: More robust phone validation
    function isValidPhone(phone) {
      return phone.matches('^\\+91[6-9][0-9]{9}$') ||
             phone.matches('^[6-9][0-9]{9}$'); // Support both formats
    }
    
    // NEW: ISO date validation
    function isValidISODate(dateString) {
      return dateString.matches('^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.*Z$');
    }
    
    function isApprovedAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.status == 'approved';
    }
    
    // Default deny rule for all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
