
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Admin collection rules
    match /admins/{adminId} {
      // Allow users to create their own admin request (for registration)
      allow create: if request.auth != null 
        && request.auth.uid == adminId
        && request.resource.data.status == 'pending'
        && request.resource.data.email == request.auth.token.email
        && isValidAdminData(request.resource.data);
      
      // Allow users to read their own admin record or approved admins can read all
      allow read: if request.auth != null 
        && (request.auth.uid == adminId || isApprovedAdmin(request.auth.uid));
      
      // Only approved admins can update admin records (for approval/rejection)
      allow update: if request.auth != null 
        && isApprovedAdmin(request.auth.uid)
        && isValidStatusUpdate(resource.data, request.resource.data);
      
      // Only approved admins can delete admin records
      allow delete: if request.auth != null 
        && isApprovedAdmin(request.auth.uid);
      
      // Allow approved admins to list all admin records
      allow list: if request.auth != null 
        && isApprovedAdmin(request.auth.uid);
    }
    
    // Admin login activities collection
    match /admin_login_activities/{activityId} {
      // Allow creating login activity records during authentication attempts
      // This includes both successful and failed login attempts
      allow create: if isValidLoginActivity(request.resource.data);
      
      // Only approved admins can read login activities
      allow read: if request.auth != null 
        && isApprovedAdmin(request.auth.uid);
      
      // Only approved admins can list login activities
      allow list: if request.auth != null 
        && isApprovedAdmin(request.auth.uid);
      
      // Prevent updates and deletes for audit trail integrity
      allow update, delete: if false;
    }
    
    // Helper function to check if user is an approved admin
    function isApprovedAdmin(uid) {
      return exists(/databases/$(database)/documents/admins/$(uid)) &&
             get(/databases/$(database)/documents/admins/$(uid)).data.status == 'approved';
    }
    
    // Helper function to validate admin data
    function isValidAdminData(data) {
      return data.keys().hasAll(['firstName', 'lastName', 'email', 'phone', 'status', 'requestedAt']) &&
             data.firstName is string && data.firstName.size() > 0 &&
             data.lastName is string && data.lastName.size() > 0 &&
             data.email is string && data.email.matches('.*@.*\\..*') &&
             data.phone is string && data.phone.size() > 0 &&
             data.status is string &&
             data.requestedAt is string;
    }
    
    // Helper function to validate login activity data
    function isValidLoginActivity(data) {
      return data.keys().hasAll(['email', 'loginTime', 'status']) &&
             data.email is string && data.email.matches('.*@.*\\..*') &&
             data.loginTime is string &&
             data.status is string && data.status in ['success', 'failed'] &&
             (!('adminId' in data) || data.adminId is string) &&
             (!('ipAddress' in data) || data.ipAddress is string) &&
             (!('userAgent' in data) || data.userAgent is string) &&
             (!('failureReason' in data) || data.failureReason is string);
    }
    
    // Helper function to validate status updates
    function isValidStatusUpdate(oldData, newData) {
      let allowedStatusChanges = [
        // Pending to approved/rejected
        (oldData.status == 'pending' && (newData.status == 'approved' || newData.status == 'rejected')),
        // Approved to revoked
        (oldData.status == 'approved' && newData.status == 'revoked'),
        // Revoked to approved (re-approval)
        (oldData.status == 'revoked' && newData.status == 'approved'),
        // Rejected to approved (second chance approval)
        (oldData.status == 'rejected' && newData.status == 'approved')
      ];
      
      return allowedStatusChanges.hasAny([true]) && 
             // Ensure required fields are present for status changes
             (newData.status == 'approved' ? 
               ('approvedAt' in newData && 'approvedBy' in newData) : true) &&
             (newData.status == 'rejected' ? 
               ('rejectedAt' in newData && 'rejectedBy' in newData) : true) &&
             (newData.status == 'revoked' ? 
               ('revokedAt' in newData && 'revokedBy' in newData) : true) &&
             // Prevent modification of core user data during status updates
             newData.firstName == oldData.firstName &&
             newData.lastName == oldData.lastName &&
             newData.email == oldData.email &&
             newData.phone == oldData.phone;
    }
    
    // Default deny rule for all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
